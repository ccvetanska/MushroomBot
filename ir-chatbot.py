from preprocess import preprocess_mushroom
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
from rich.console import Console
from PIL import Image
import requests
from io import BytesIO
import numpy as np
import json

class MushroomBot:
  exit_commands = ("—Å—Ç–æ–ø", "—Å–ø—Ä–∏", "—Å—Ç–∏–≥–∞", "—á–∞–æ", "–¥–æ–≤–∏–∂–¥–∞–Ω–µ", "–∫—Ä–∞–π")
  underside_values = {"gills": ("–ª–∞–º–µ–ª–∏", "—Ä–µ—Å–Ω–∏"), "pores": ("–ø–æ—Ä–∏"), "tubes": ("—Ç—Ä—ä–±–∏—á–∫–∏", "–¥—ä–ª–±–æ–∫–∏ –ø–æ—Ä–∏")}
  console = Console()

  GREEN = "\033[38;5;77m"
  RED = "\033[38;5;196m"
  RESET = "\033[0m"

  def __init__(self):
    with open("corpus/questions.json", "r", encoding="utf-8") as file:
      self.questions = json.load(file)

    with open("corpus/parsed_mushrooms_data.json", "r", encoding="utf-8") as file:
      self.mushrooms = json.load(file)

    with open("corpus/preprocessed_mushrooms.json", "r", encoding="utf-8") as file:
      self.preprocessed_mushrooms = json.load(file)

    self.vectorizers = {}
    self.tf_idf_vectors = {}
    for key in self.questions:
      docs = self.get_mushroom_values(self.preprocessed_mushrooms, key)
      self.vectorizers[key] = TfidfVectorizer()
      self.tf_idf_vectors[key] = self.vectorizers[key].fit_transform(docs)

  def welcome(self):
    print(self.format_message("–ó–¥—Ä–∞–≤–µ–π, –∞–∑ —Å—ä–º —Ç–≤–æ—è—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –≥—ä–±–∏. üçÑ –©–µ —Ç–∏ –∑–∞–¥–∞–º –Ω—è–∫–æ–ª–∫–æ –≤—ä–ø—Ä–æ—Å–∞ –∑–∞ –≥—ä–±–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—à –¥–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞—à –∏ —â–µ —Å–µ –ø–æ—Å—Ç–∞—Ä–∞—è –¥–∞ –Ω–∞–º–µ—Ä—è –Ω–∞–π-–±–ª–∏–∑–∫–æ—Ç–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ. –ù–µ–∫–∞ –¥–∞ –∑–∞–ø–æ—á–≤–∞–º–µ!"))
  
  def chat(self):
    should_exit, input_mushroom = self.build_mushroom()
    if should_exit:
      return
    
    preprocessed_mushroom = preprocess_mushroom(input_mushroom)
    similarities = self.compute_similarities(preprocessed_mushroom)

    self.print_response(similarities)

    if "–¥–∞" in input(self.format_message("–ò—Å–∫–∞—à –ª–∏ –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–µ—à –¥—Ä—É–≥–∞ –≥—ä–±–∞? üçÑ")).lower():
      self.chat()

  def build_mushroom(self):
    mushroom = {key: "–ù—è–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" for key in self.questions}

    for key, questions in self.questions.items():
      if key in self.underside_values and mushroom["underside"].lower() not in self.underside_values[key]:
        continue

      for question in questions:
        reply = input(self.format_message(question))
        if self.should_exit(reply):
          return True, mushroom
        
        if self.is_unknown(reply):
          break
        
        mushroom[key] = reply if mushroom[key] == "–ù—è–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" else mushroom[key] + " " + reply
    
    return False, mushroom
  
  def is_unknown(self, reply):
    #TODO
    pass

  def should_exit(self, reply):
    for exit_command in self.exit_commands:
      if exit_command in reply.lower():
        return True
      
    return False

  def compute_similarities(self, mushroom):
    mushroom_tf_idf_vectors = {}
    for key in self.questions:
      docs = self.get_mushroom_values([mushroom], key)
      mushroom_tf_idf_vectors[key] = self.vectorizers[key].transform(docs)

    similarities = []
    for i in range(0, len(self.preprocessed_mushrooms)):
      similarities.append(self.compute_similarity(mushroom_tf_idf_vectors, i))

    return similarities
  
  def compute_similarity(self, mushroom_tf_idf_vectors, doc_index):
    key_similarities = {}

    for key in self.questions:
      similarity = cosine_similarity(mushroom_tf_idf_vectors[key][0], self.tf_idf_vectors[key][doc_index])
      key_similarities[key] = similarity

    return np.mean(list(key_similarities.values()))
  
  def get_mushroom_values(self, mushrooms, key):
    return [mushroom[key] for mushroom in mushrooms]

  def print_response(self, similarities):
    sorted_indices = np.argsort(similarities)[::-1]
    best_match = self.mushrooms[sorted_indices[0]]

    response = f"–ë–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ! –í—ä–∑ –æ—Å–Ω–æ–≤–∞ –Ω–∞ —Ç–≤–æ–∏—Ç–µ –æ—Ç–≥–æ–≤–æ—Ä–∏, –Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–∞—Ç–∞ –≥—ä–±–∞ ({similarities[sorted_indices[0]]}%) –µ {best_match['bgName']} ({best_match['latinTitle']})"

    response += f" ({best_match['images'][0]})\n\n" if best_match['images'] and best_match['images'][0] else ".\n\n"

    response += f"{best_match['summary']}\n\n"
      
    second_best_match = self.mushrooms[sorted_indices[1]]
    if(second_best_match):
      response += f"–í—Ç–æ—Ä–∞—Ç–∞ –Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–∞ –≥—ä–±–∞ ({similarities[sorted_indices[1]]}%) –µ {second_best_match['bgName']} ({second_best_match['latinTitle']})."
      
      third_best_match = self.mushrooms[sorted_indices[2]]
      if(third_best_match):
        response += f" –¢—Ä–µ—Ç–∞—Ç–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç ({similarities[sorted_indices[2]]}%) –µ {third_best_match['bgName']} ({third_best_match['latinTitle']})."
    
    print(self.format_message(response))

    print(self.format_important_message("–í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∫–æ–≥–∞ –Ω–µ —è–∂—Ç–µ –≥—ä–±–∏ —Å–∞–º–æ –≤—ä–∑ –æ—Å–Ω–æ–≤–∞ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏/–∏–ª–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏—Ç–µ –Ω–∞ —Ç–æ–∑–∏ –±–æ—Ç! –ö–æ–Ω—Å—É–º–∞—Ü–∏—è—Ç–∞ –Ω–∞ –æ—Ç—Ä–æ–≤–Ω–∏ –≤–∏–¥–æ–≤–µ –º–æ–∂–µ –¥–∞ –¥–æ–≤–µ–¥–µ –¥–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ —Å–º—ä—Ä—Ç, –∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–µ—Ç–æ –∏–º –µ —Å–ª–æ–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å, –∏–∑–∏—Å–∫–≤–∞—â –º–Ω–æ–≥–æ –æ–ø–∏—Ç."))

  def goodbye(self):
    print(self.format_message("–ë–µ—à–µ –º–∏ –ø—Ä–∏—è—Ç–Ω–æ –¥–∞ —Ç–∏ –ø–æ–º–∞–≥–∞–º —Å —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≥—ä–±–∏! üçÑ –ê–∫–æ –∏–º–∞—à –æ—â–µ –≤—ä–ø—Ä–æ—Å–∏ –∏–ª–∏ —Å—Ä–µ—â–Ω–µ—à –Ω–æ–≤–∏ –≥—ä–±–∏, –Ω–µ —Å–µ –∫–æ–ª–µ–±–∞–π –¥–∞ –º–µ –ø–æ—Ç—ä—Ä—Å–∏—à –æ—Ç–Ω–æ–≤–æ. –î–æ —Å–∫–æ—Ä–æ! üëã"))
  
  def format_message(self, message):
    return f"\n{self.GREEN}{message}{self.RESET}\n"
  
  def format_important_message(self, message):
    return f"\n{self.RED}{message}{self.RESET}\n"

mushroom_bot = MushroomBot()

mushroom_bot.welcome()
mushroom_bot.chat()
mushroom_bot.goodbye()
